{
    "description": "<p>The \"programmable menu\" feature of the HP42S lets you create your own menu - pressing the key underneath each menu item will execute the associated function.&nbsp; There is both a traditional and new simplified way of building these menus.</p>\r\n<p>The new simplified <code>menu()</code> function takes a list of string menu items - representing the function names you want to call.&nbsp; The assigning to keys will be done automatically.&nbsp; Note that this only implements the KEYX semantics, which means each key will <em>execute</em> the specified function.&nbsp; If you want the KEYG semantics of GTO then you will need to build the menu in the traditional way, where you get more control. P.S. If anybody can point out use of KEYG, please let me know!</p>\r\n<p>Note that each function you call must be a named global function, hence the need to mark each function with the&nbsp;# rpn: export directive.&nbsp; TODO: It may be possible in the future to call local functions without exposing them to the global namespace. I am working on this.</p>",
    "public": "yes",
    "sortnum": 5,
    "source": "def ui1():  # new easy technique\r\n  menu(\"blah1\", \"blah2\")\r\n\r\ndef ui1_traditional():  # traditional technique - rpn: export\r\n  \"blah1\"\r\n  KEYG(1, \"blah1\")\r\n  \"blah2\"\r\n  KEYG(2, \"blah2\")\r\n  MENU()\r\n\r\ndef blah1():  # rpn: export\r\n  print('you chose blah1')\r\n\r\ndef blah2():  # rpn: export\r\n  print('you chose blah2')",
    "tags": "User_Interface",
    "title": "Menu"
}