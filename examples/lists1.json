{
    "description": "<p>You must use uppercase variables for lists.&nbsp; You can also initialise a list with values then append to it later e.g.</p>\r\n<pre class=\"language-python\"><code>A = [200]\r\nA.append(5)</code></pre>\r\n<p>Lists are implemented as matrices with one column, and as many rows as is needed (matrix grows as you append elements).</p>\r\n<p>You can <strong>get</strong> elements of an array with e.g. <code>A[2]</code> though remember Python lists are 0 based, so to get the first element, you want <code>A[0]</code>.&nbsp;&nbsp;You can of course also <strong>set</strong> elements of an array e.g.</p>\r\n<pre class=\"language-python\"><code>def set_array_n_to_99(n):\r\n  A = [1,2,3]\r\n  A[n] = 99</code></pre>\r\n<p>You can even store short strings (max 6 chars) as list elements in lists.</p>\r\n<pre class=\"language-python\"><code>def strmanip():\r\n  A = [\"hi\", \"there\"]\r\n  A[0] = \"hello\"</code></pre>\r\n<p>Some more advanced loops and list accesses:</p>\r\n<pre class=\"language-python\"><code>def el1test():\r\n    a = [1, 2]\r\n    for el in a:\r\n        VIEW(el)\r\n        PSE()\r\n\r\ndef el2test():\r\n  a = ['aa', 'bb', 'cc']\r\n  for el in a:\r\n    PROMPT('el=', el)\r\n  print('done')\r\n\r\ndef el3test():\r\n  a = ['aa', 'bb']\r\n  for el in [11, 22]:\r\n    PROMPT(el, a[1])\r\n  print('done')\r\n\r\n  </code></pre>",
    "public": "yes",
    "sortnum": 0,
    "source": "def a10():\r\n  A = []\r\n  for i in range(10):\r\n    A.append(i)",
    "title": "Lists"
}