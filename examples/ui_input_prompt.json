{
    "description": "<p>You need to specify native uppercase HP42S commands in your Python code for doing user input.&nbsp; The basic difference between HP42S native PROMPT and INPUT is that the former specifies a custom text prompt, whilst the latter prompts with the name of the variable, and shows the current value of that variable.&nbsp; Both commands stop program execution till you press R/S on the calculator.</p>\r\n<h4>INPUT</h4>\r\n<p>Takes a normal Python variable as a parameter - do not put variable in quotes. Specifying HP42S registers not supported.&nbsp; E.g.&nbsp;<code>INPUT(v2)</code></p>\r\n<h4>PROMPT</h4>\r\n<p>Display the Alpha register and halts program execution. To store the value entered during the prompt into a variable simply assign to that variable e.g. <code>myvar = PROMPT('enter val')</code>.&nbsp; Remember that you must type a numeric value, then when ready, hit R/S on your calculator to continue running the program after a prompt.</p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: center;\">* * *</p>\r\n<h4><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Discussions</span></h4>\r\n<p><span style=\"text-decoration: underline;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\">How Python variables are converted to RPN</span></span></span></p>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">You generally don't have to worry about how Python variables are converted to either RPN named variables vs RPN registers - because when you are programming in Python, you don't really care how your Python variables are converted to RPN.&nbsp; You just basicaly <strong>think in Python</strong> and treat the generated RPN as \"machine code\" that you never look at.</span></p>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">However, for those interested, read the \"RPN tips\" in the example code for information on what RPN code is generated.&nbsp; You might be interested in this if you want your Python program to end up with some RPN named variables for use and access later.&nbsp; Its easy to access named variables rather than have to figure out what random numbered register might have been used to store the Python variable.&nbsp; But on the other hand, named variables pollute the global HP42S namespace, thus generally its better to allow the default behaviour of using numbered registers.</span></p>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Interestingly the default numbered register behaviour is not followed with the INPUT&nbsp;</span>command: the variable referred to as the parameter will be converted into RPN as a named variable rather than converted into an auto allocated numbered RPN register.&nbsp; The only exception to this rule is if that variable has previously been assigned to - then it will be converted into RPN as an auto allocated numbered register.&nbsp; I'm not sure why this implementation decision was made and this behaviour may be change in the future.</p>\r\n<p><span style=\"text-decoration: underline;\">Using AVIEW and INPUT together</span></p>\r\n<p>Interestingly, I have observed that if you do a&nbsp;AVIEW(\"some message\") prior to an INPUT, you get the message on the top line of the HP42S and the input prompt on the second line - nice.&nbsp;&nbsp;<span style=\"text-decoration: underline;\">Warning</span>: If you are viewing a message using AVIEW(\"some really long multi-line message\") that takes up&nbsp;<strong>two lines</strong>, then you won't see the subsequent prompt generated by INPUT.&nbsp; This is because the prompt&nbsp; on the second line of the HP42S display is occupied by the multiline alpha string and the INPUT command doesn't seem to clear it.&nbsp; To work around this edge case of Free42/HP42S? behaviour view an empty string in the alpha register using print(\"\").&nbsp; Clearing the alpha register with CLA() is not enough.&nbsp; Discussion on the forum <a href=\"http://www.hpmuseum.org/forum/thread-11738.html\">here</a>.</p>\r\n<p><span style=\"text-decoration: underline;\">Future developments</span></p>\r\n<p>There is&nbsp;<a href=\"http://www.hpmuseum.org/forum/thread-11655-post-106442.html#pid106442\" target=\"_blank\" rel=\"noopener\">a proposal</a>&nbsp;for this Python to RPN converter to support the native Python <code>input()</code> command but this is not yet supported.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "public": "yes",
    "sortnum": 10,
    "source": "LBL(\"user_input_examples\")\r\n  \r\n# Ask user for input and store into named variable v1\r\n# The prompt by the calculator will be the name of \r\n# the variable. RPN tip: Python \"v1\" is \r\n# converted/mapped to RPN named variable \"v1\"\r\nINPUT(v1)\r\nprint(\"You entered\", v1, \"answer is\", v1 + 200)\r\nPSE()\r\nPSE()\r\n\r\n# clear long message in alpha or you won't see \r\n# next input prompt\r\nprint(\"\")\r\n\r\n# Ask user for number input and store into variable v2 \r\n# The prompt by the calculator will be the name of the\r\n# variable RPN tip: Python \"v2\" is converted/mapped to\r\n# RPN auto allocated numbered register, due to early \r\n# use/initialisation of variable v2\r\nv2 = 100\r\nINPUT(v2)\r\nprint(\"You entered\", v2, \"answer is\", v2 + 1)\r\nPSE()\r\nPSE()\r\n\r\n# Prompt user with \"length?\" prompt and store result \r\n# into variable length RPN tip: Python \"length\" mapped\r\n# to auto allocated numbered register\r\n#\r\n0  # optionally set initial value in RPN X register\r\nmyvar = PROMPT(\"length?\")\r\nprint(\"sine of\", myvar, \"is\", SIN(myvar))\r\nPSE()\r\nPSE()\r\n\r\n# Prompt user with \"enter something!\" prompt \r\n# and store result into variable MYVAR \r\n# RPN tip: Python \"MYVAR\" mapped to RPN named variable\r\n# MYVAR, because MYVAR is uppercase in Python \r\n# (it's the converter's convention to map lowercase \r\n# variables to RPN auto allocated numbered registers \r\n# and to map uppercase Python variables to \r\n# RPN named variables\r\n#\r\n0  # optionally set initial value in RPN X register\r\nMYVAR = PROMPT(\"enter something!\")\r\nprint(\"you entered\", MYVAR)\r\nPSE()\r\nPSE()\r\n\r\n# Prompt user with \"enter value:\" prompt and store\r\n# the result into Python variable \"myvar\" \r\n# RPN tip: Python variable \"myvar\" mapped to RPN named\r\n# variable \"myvar\", because of the comment \r\n# \"# rpn: named\" which is a special directive to the \r\n# converter to please create a named RPN variable, which\r\n# is not the default conversion behaviour.\r\n#\r\n0  # optionally set initial value in RPN X register\r\nmyvar = PROMPT(\"enter value:\")  # rpn: named\r\nprint(\"thank you, you entered\", myvar)\r\nlong_pause()\r\n\r\nprint(\"Finished demo, thank you.\")\r\n\r\n# Util\r\n\r\ndef long_pause():\r\n  for i in range(3):\r\n    PSE()",
    "tags": "User_Interface, Introductory_Examples",
    "title": "Prompting for input"
}