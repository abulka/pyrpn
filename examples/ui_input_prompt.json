{
    "description": "<p>You need to call native HP42S commands.&nbsp; The basic difference between PROMPT and INPUT is that the former specifies a custom text prompt, whilst the latter prompts with the name of the variable.</p>\r\n<p>There is a proposal to support the native Python input() command (see below) but this is not yet supported.</p>\r\n<h4>Prompt</h4>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Display the Alpha register and halt program execution. To store the value entered during the prompt into a variable simply assign to that variable e.g. <code>myvar = PROMPT('enter val').</code>&nbsp; Remember that you must type a numeric value, then when ready, hit R/S on your calculator to continue running the program after a prompt.</span></p>\r\n<h4>Input</h4>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Takes a normal Python variable as a parameter - do not put variable in quotes. Specifying HP42S registers not supported. </span></p>\r\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Note: The variable referred to as the parameter will be converted into RPN as a named variable rather than converted into an auto allocated numbered RPN register - unless that variable has previously been assigned to - in which case it will be converted into RPN as an auto allocated numbered register.</span></p>\r\n<h2><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Future work on Input</span></h2>\r\n<p>Currently Python's input() command is not supported at all by the converter. You have to use the native HP42S command INPUT, which is ok, since you can access all HP42S functions from the Python converter by invoking them as uppercase functions. Thus type INPUT(myvar) into the converter to get the RPN output INPUT \"myvar\". So it would be trivial for me to implement the conversion of the Python native expression myvar = input(\"prompt\") as INPUT \"myvar\", which will run nicely on the HP42S, DM42, Free42.</p>\r\n<p>So far so good. Where it gets interesting is that Python allows you to specify a parameter to the input function, which is the prompt. I'm thinking of implementing it in RPN like this:</p>\r\n<pre class=\"language-markup\"><code>\"enter value&gt;\"\r\nPROMPT\r\nSTO \"myvar\"\r\n\r\n</code></pre>\r\n<p>a more sophisticated implementation would display the old value of the variable underneath the prompt, cater for nonexistent variables (hence the flag 25 magic) and clean up the stack as best I can afterwards, thus:</p>\r\n<pre class=\"language-markup\"><code>SF 25\r\nRCL \"myvar\"\r\nFC?C 25\r\n0\r\n\"enter value&gt;\"\r\nPROMPT\r\nSTO \"myvar\"\r\nRDN\r\nRDN</code></pre>\r\n<p>If anybody has any thoughts on improving this implementation, please comment.&nbsp;&nbsp;http://www.hpmuseum.org/forum/thread-11655-post-106442.html#pid106442</p>\r\n<p>Thus the full future experience would convert the Python</p>\r\n<pre class=\"language-python\"><code># Python code for use in https://pyrpn.herokuapp.com\r\nLBL \"PROMPTIN\"\r\nmyval = input(\"enter value&gt;\")\r\nprint(\"val was\", myval)</code></pre>\r\n<p><span style=\"font-family: Monaco, Consolas, Courier, monospace;\"><span style=\"font-size: 13px;\">into the runnable RPN (try pasting the below into Free42)</span></span></p>\r\n<pre class=\"language-markup\"><code>00 LBL \"PROMPTIN\"\r\n00 SF 25\r\n00 RCL \"myvar\"\r\n00 FC?C 25\r\n00 0\r\n00 \"enter value&gt;\"\r\n00 PROMPT\r\n00 STO \"myvar\"\r\n00 RDN\r\n00 RDN\r\n00 \"val was\"\r\n00 \u251c\" \"\r\n00 ARCL \"myvar\"\r\n00 AVIEW\r\n00 RTN[/code]</code></pre>\r\n<p><span style=\"font-family: Monaco, Consolas, Courier, monospace;\"><span style=\"font-size: 13px;\">This enhancement proposal should allow people who are typing the Python input() command to get a useful result, rather than being puzzled why that particular bit of syntax is not being converted properly. Its arguably a common enough idiom that it should be supported.</span></span></p>",
    "public": "yes",
    "sortnum": 10,
    "source": "LBL(\"input_examples\")\r\n\r\n# ask user for input and store into variable v1 (which is in reality converted to a numbered register in HP42S)\r\nv1 = 0\r\nINPUT(v1)\r\nprint(v1 + 2)\r\n\r\n# ask user for input and store into named variable v1\r\nINPUT(v2)\r\nprint(v2 + 200)\r\n\r\n# prompt with \"what\" prompt and store result into variable myvar (mapped to auto allocated numbered register)\r\nmyvar = PROMPT(\"what\")\r\n\r\n# prompt with \"what\" prompt and store result into variable MYVAR (mapped to named variable MYVAR, cos MYVAR is uppercase)\r\nMYVAR = PROMPT(\"what\")\r\n\r\n# prompt with \"what\" prompt and store result into variable myvar (mapped to named variable, cos of # rpn: named directive)\r\nmyvar = PROMPT(\"enter>\")  # rpn: named\r\n",
    "tags": "User_Interface",
    "title": "Prompting for input"
}