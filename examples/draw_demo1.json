{
    "description": "<p>Massive demo of drawing with lines, circles, rectangles, filled rectangles and filled circles.</p>\r\n<p><strong>Warning</strong>: you need to increase the number of registers from the default of 25 to something like 50 using <code>SIZE 0050</code>&nbsp;</p>\r\n<p>The graphic drawing functions are:</p>\r\n<ul>\r\n<li><strong>draw_line</strong>(x0, y0, x1, y1)</li>\r\n<li><strong>draw_rect</strong>(x0, y0, w, h)</li>\r\n<li><strong>fill_rect</strong>(x0, y0, w, h)</li>\r\n<li><strong>draw_circle</strong>(x0, y0, r)</li>\r\n<li><strong>fill_circle</strong>(x0, y0, r)</li>\r\n</ul>",
    "public": "yes",
    "sortnum": 0,
    "source": "def dd1_draw_demo1():\r\n  FIX(0)\r\n  CLLCD()\r\n  draw_line(0, 0, 10, 10)\r\n  draw_line(10, 10, 20, 5)\r\n  draw_line(20, 5, 100, 16)\r\n  draw_line(100, 16, 131, 1)\r\n  draw_rect(70, 4, 5, 5)\r\n  fill_rect(18, 9, 12, 4)\r\n  draw_circle(96, 8, 5)\r\n  fill_circle(125, 10, 3)\r\n  \r\ndef dd2_draw_demo():  # rpn: export\r\n    FIX(0)\r\n    CLLCD()\r\n    \r\n    XRES = 131\r\n    YRES = 16\r\n    \r\n    # some pixels\r\n    for i in range(1, XRES, 5):\r\n        x = i\r\n        PIXEL(x, YRES / 2)\r\n    \r\n    # some lines (note the quite likely 'Moire pattern')\r\n    for i in range(1, XRES / 4, 2):\r\n        x = i\r\n        #PRA('moire', 0, 0, x, YRES)\r\n        draw_line(0, 0, x, YRES)\r\n    \r\n    # some rectangles\r\n    fromx = XRES / 4\r\n    fromy = YRES / 2\r\n    width = XRES / 4\r\n    height = YRES / 4\r\n    draw_rect(fromx, fromy, width, height)\r\n    \r\n    fromx = XRES / 4 + 10\r\n    fromy = YRES / 2 + 4\r\n    width = XRES / 4 - 20\r\n    height = YRES / 4\r\n    draw_rect(fromx, fromy, width, height)\r\n    \r\n    fromx = XRES / 8\r\n    width = XRES / 4\r\n    height = YRES / 4\r\n    fill_rect(fromx, 1, width, height)\r\n    \r\n    # some circles\r\n    for i in range(2, YRES / 2, 2):\r\n        d = i\r\n        draw_circle(3 * XRES / 4, 2 * YRES / 4, d)\r\n    \r\n    fill_circle(15 * XRES / 16, 2 * YRES / 4, YRES / 3)\r\n    fill_circle(8 * XRES / 13, 3 * YRES / 4, YRES / 2)\r\n    \r\ndef draw_line(x0, y0, x1, y1):  # rpn: int\r\n    dx = ABS(x1 - x0)\r\n    dy = ABS(y1 - y0)\r\n    if x0 < x1:\r\n        sx = 1\r\n    else:\r\n        sx = -1\r\n    if y0 < y1:\r\n        sy = 1\r\n    else:\r\n        sy = -1\r\n    err = dx - dy\r\n    done = 0\r\n    while not done:\r\n        #PRA('pixel', x0, y0)\r\n        PIXEL(x0, y0)\r\n        #PRA('if', x0, x1, y0, y1)\r\n        if (x0 == x1) and (y0 == y1):\r\n            done = 1\r\n        else:\r\n            e2 = 2 * err\r\n            if e2 > -dy:\r\n                err = err - dy\r\n                x0 = x0 + sx\r\n            if e2 < dx:\r\n                err = err + dx\r\n                y0 = y0 + sy\r\n\r\n# (x0, y0) = left top corner coordinates\r\n# w = width and h = height\r\ndef draw_rect(x0, y0, w, h):  # rpn: int\r\n  #PRA('draw_rect', x0, y0, w, h)\r\n  y1 = y0 + h\r\n  draw_line(x0, y0, x0 + w, y0)  # top\r\n  draw_line(x0, y0, x0, y1)  # left\r\n  draw_line(x0, y0 + h, x0 + w, y1)  # bottom\r\n  draw_line(x0 + w, y0, x0 + w, y1)  # right\r\n\r\ndef fill_rect(x0, y0, w, h):  # rpn: int\r\n  #for (y = 0; y < h; y++):  # TODO make any var work in a for loop\r\n  for i in range(h):  # TODO make any var work in a for loop\r\n    y = i\r\n    y1 = y0 + y\r\n    draw_line(x0, y0 + y, x0 + w, y1)\r\n\r\ndef draw_circle(x0, y0, r):  # rpn: int\r\n    x = r;\r\n    y = 0;\r\n    radiusError = 1 - x;\r\n\r\n    while (x >= y):\r\n        #PRA('x= ', x, ' y= ', y, ' ', radiusError)\r\n        PIXEL(-y + x0, -x + y0)  # top left\r\n        PIXEL(y + x0, -x + y0)  # top right\r\n        PIXEL(-x + x0, -y + y0)  # upper middle left\r\n        PIXEL(x + x0, -y + y0)  # upper middle right\r\n        PIXEL(-x + x0, y + y0)  # lower middle left\r\n        PIXEL(x + x0, y + y0)  # lower middle right\r\n        PIXEL(-y + x0, x + y0)  # bottom left\r\n        PIXEL(y + x0, x + y0)  # bottom right\r\n\r\n        y += 1;\r\n        if (radiusError < 0):\r\n            radiusError += 2 * y + 1\r\n        else:\r\n            x -= 1\r\n            radiusError += 2 * (y - x + 1)\r\n\r\ndef fill_circle(x0, y0, r):  # rpn: int\r\n    x = r\r\n    y = 0\r\n    radiusError = 1 - x\r\n\r\n    while (x >= y):\r\n        fromx = -y + x0\r\n        fromy = -x + y0\r\n        tox = y + x0\r\n        toy = -x + y0\r\n        draw_line(fromx, fromy, tox, toy)  # top\r\n\r\n        fromx = -x + x0\r\n        fromy = -y + y0\r\n        tox = x + x0\r\n        toy = -y + y0\r\n        draw_line(fromx, fromy, tox, toy)  # upper middle\r\n\r\n        fromx = -x + x0\r\n        fromy = y + y0\r\n        tox = x + x0\r\n        toy = y + y0\r\n        draw_line(fromx, fromy, tox, toy)  # lower middle\r\n\r\n        fromx = -y + x0\r\n        fromy = x + y0\r\n        tox = y + x0\r\n        toy = x + y0\r\n        draw_line(fromx, fromy, tox, toy)  # bottom\r\n\r\n        y += 1\r\n        if radiusError < 0:\r\n            radiusError += 2 * y + 1\r\n        else:\r\n            x -= 1\r\n            radiusError += 2 * (y - x + 1)\r\n",
    "title": "Draw Demo 1"
}