{
    "description": "<p>Massive demo of drawing with lines, circles, rectangles, filled rectangles and filled circles.</p>\r\n<p><strong>Warning</strong>: you need to increase the number of registers from the default of 25 to something like 60 using <code>SIZE 0060</code>&nbsp;</p>\r\n<p>The graphic drawing functions are:</p>\r\n<ul>\r\n<li><strong>draw_line</strong>(x0, y0, x1, y1)</li>\r\n<li><strong>draw_rect</strong>(x0, y0, w, h)</li>\r\n<li><strong>fill_rect</strong>(x0, y0, w, h)</li>\r\n<li><strong>draw_circle</strong>(x0, y0, r)</li>\r\n<li><strong>fill_circle</strong>(x0, y0, r)</li>\r\n</ul>\r\n<p>About coordinate systems.&nbsp; These drawing routines are based on C and javascript algorithms which use a coordinate system:</p>\r\n<pre class=\"language-markup\"><code>0,0 --- MAX x\r\n|\r\n|\r\nMAX x</code></pre>\r\n<p>which is similar to the HP42S graphic coordinate system</p>\r\n<pre class=\"language-markup\"><code>1,1 --- MAX col\r\n|\r\n|\r\nMAX row</code></pre>\r\n<p>Besides the 0 based vs 1 based difference, the main thing to note is that these drawing algorithms treat <em>left to right</em> as x, like on a graph - which sounds right, doesn't it?&nbsp; Interestingly, the 42S treats&nbsp;<em>left to right</em>&nbsp;as columns - which also sounds right when thinking about matrices and tables.&nbsp; Both ways are 'right' depending on what convention you want to adopt.&nbsp; Why does this matter?</p>\r\n<ul>\r\n<li>If you study these algorithms, you will notice that the original (C and javascript) implementation's calls to pixel(x,y) have been altered into the 42S way of PIXEL(y,x) which means PIXEL(row, col) in the 42S world.&nbsp; In other words, these drawing algorithm graphic <strong>x,y</strong> coordinates translate into <strong>col,row</strong> coordinates on a 42S and because the PIXEL function takes (row, col), the algorithm calls to pixel have had their parameters swapped.</li>\r\n<li>This means that if you are drawing anything with these graphic routines, you need to think about a x,y based coordinate system and not the row,col coordinate system.</li>\r\n<li>When calling PIXEL(row, col) directly, then yes of course, think about the row,col coordinate system.</li>\r\n<li>The final irony is that PIXEL(row, col) converts into RPN where y:row x:col on the stack - which is as it should be in the HP42S manual.&nbsp; The stack position names happen to correspond perfectly to mapping between these two coordinate system concepts. :-)</li>\r\n</ul>",
    "public": "yes",
    "sortnum": 0,
    "source": "\"\"\"\r\nYou want to change the number of registers to about 60 \r\nfor this code to run on Free42.  SIZE 0060 should do it.\r\nRun the demos with:\r\n  XEQ \"dd1_dra\"\r\n  XEQ \"dd2_dra\"\r\n  XEQ \"dd3_dra\"\r\n\"\"\"\r\ndef dd1_draw_demo1():\r\n  FIX(0)\r\n  SIZE(60)\r\n  CLLCD()\r\n  draw_line(0, 0, 10, 10)\r\n  draw_line(10, 10, 20, 5)\r\n  draw_line(20, 5, 100, 16)\r\n  draw_line(100, 16, 131, 1)\r\n  draw_rect(70, 4, 5, 5)\r\n  fill_rect(18, 9, 12, 4)\r\n  draw_circle(96, 8, 5)\r\n  fill_circle(125, 10, 3)\r\n  \r\ndef dd2_draw_demo():  # rpn: export\r\n    FIX(0)\r\n    SIZE(60)\r\n    CLLCD()\r\n    \r\n    XRES = 131\r\n    YRES = 16\r\n    \r\n    # some pixels\r\n    for i in range(1, XRES, 5):\r\n        x = i\r\n        row = YRES / 2\r\n        col = x\r\n        PIXEL(row, col)\r\n    \r\n    # some lines (note the quite likely 'Moire pattern')\r\n    for i in range(1, XRES / 4, 2):\r\n        x = i\r\n        #PRA('moire', 0, 0, x, YRES)\r\n        draw_line(0, 0, x, YRES)\r\n    \r\n    # some rectangles\r\n    fromx = XRES / 4\r\n    fromy = YRES / 2\r\n    width = XRES / 4\r\n    height = YRES / 4\r\n    draw_rect(fromx, fromy, width, height)\r\n    \r\n    fromx = XRES / 4 + 10\r\n    fromy = YRES / 2 + 4\r\n    width = XRES / 4 - 20\r\n    height = YRES / 4\r\n    draw_rect(fromx, fromy, width, height)\r\n    \r\n    fromx = XRES / 8\r\n    width = XRES / 4\r\n    height = YRES / 4\r\n    fill_rect(fromx, 1, width, height)\r\n    \r\n    # some circles\r\n    for i in range(2, YRES / 2, 2):\r\n        d = i\r\n        draw_circle(3 * XRES / 4, 2 * YRES / 4, d)\r\n    \r\n    fill_circle(15 * XRES / 16, 2 * YRES / 4, YRES / 3)\r\n    fill_circle(8 * XRES / 13, 3 * YRES / 4, YRES / 2)\r\n    \r\ndef dd3_draw_demo1():  # rpn: export\r\n    SIZE(60)\r\n    CLLCD()\r\n    XRES = 131  # change for bigger DM42 display if you like\r\n    YRES = 16\r\n    for x in range(0, XRES/2, 30):\r\n      draw_line(0, 0, x, YRES)\r\n    # some rectangles\r\n    fromx = XRES / 2\r\n    width = XRES / 18\r\n    height = YRES / 2\r\n    fill_rect(fromx, 2, width, height)\r\n    \r\n    fromx = XRES / 2\r\n    fromy = YRES / 8\r\n    width = XRES / 6\r\n    height = YRES / 6\r\n    draw_rect(fromx, fromy, width, height)\r\n    \r\n    # some circles\r\n    for i in range(2, YRES / 2, 2):\r\n        d = i\r\n        draw_circle(3 * XRES / 4, 2 * YRES / 4, d)\r\n    \r\n    # some circles\r\n    for d in range(2, YRES/6, 2):\r\n      draw_circle(3 * XRES / 4, 2 * YRES / 4, d)\r\n\r\ndef draw_line(x0, y0, x1, y1):  # rpn: int\r\n    dx = ABS(x1 - x0)\r\n    dy = ABS(y1 - y0)\r\n    if x0 < x1:\r\n        sx = 1\r\n    else:\r\n        sx = -1\r\n    if y0 < y1:\r\n        sy = 1\r\n    else:\r\n        sy = -1\r\n    err = dx - dy\r\n    done = 0\r\n    while not done:\r\n        #PRA('pixel', x0, y0)\r\n        row = y0\r\n        col = x0\r\n        PIXEL(row, col)\r\n        if (x0 == x1) and (y0 == y1):\r\n            done = 1\r\n        else:\r\n            e2 = 2 * err\r\n            if e2 > -dy:\r\n                err = err - dy\r\n                x0 = x0 + sx\r\n            if e2 < dx:\r\n                err = err + dx\r\n                y0 = y0 + sy\r\n\r\n# (x0, y0) = left top corner coordinates\r\n# w = width and h = height\r\ndef draw_rect(x0, y0, w, h):  # rpn: int\r\n  #PRA('draw_rect', x0, y0, w, h)\r\n  y1 = y0 + h\r\n  draw_line(x0, y0, x0 + w, y0)  # top\r\n  draw_line(x0, y0, x0, y1)  # left\r\n  draw_line(x0, y0 + h, x0 + w, y1)  # bottom\r\n  draw_line(x0 + w, y0, x0 + w, y1)  # right\r\n\r\ndef fill_rect(x0, y0, w, h):  # rpn: int\r\n  #for (y = 0; y < h; y++):  # TODO make any var work in a for loop\r\n  for i in range(h):  # TODO make any var work in a for loop\r\n    y = i\r\n    y1 = y0 + y\r\n    draw_line(x0, y0 + y, x0 + w, y1)\r\n\r\ndef draw_circle(x0, y0, r):  # rpn: int\r\n    x = r;\r\n    y = 0;\r\n    radiusError = 1 - x;\r\n\r\n    while (x >= y):\r\n        # Note: 42S pixel row is a y coordinate (top to bottom), 42S col is the x coordinate (left to right)\r\n        # So I swap the parameters from the javascript version\r\n        \r\n        # PIXEL(-y + x0, -x + y0)  # top left\r\n        # PIXEL(y + x0, -x + y0)  # top right\r\n        # PIXEL(-x + x0, -y + y0)  # upper middle left\r\n        # PIXEL(x + x0, -y + y0)  # upper middle right\r\n        # PIXEL(-x + x0, y + y0)  # lower middle left\r\n        # PIXEL(x + x0, y + y0)  # lower middle right\r\n        # PIXEL(-y + x0, x + y0)  # bottom left\r\n        # PIXEL(y + x0, x + y0)  # bottom right\r\n    \r\n        PIXEL(-x + y0, -y + x0)  # top left\r\n        PIXEL(-x + y0, y + x0)  # top right\r\n        PIXEL(-y + y0, -x + x0)  # upper middle left\r\n        PIXEL(-y + y0, x + x0)  # upper middle right\r\n        PIXEL(y + y0, -x + x0)  # lower middle left\r\n        PIXEL(y + y0, x + x0)  # lower middle right\r\n        PIXEL(x + y0, -y + x0)  # bottom left\r\n        PIXEL(x + y0, y + x0)  # bottom right\r\n\r\n        y += 1;\r\n        if (radiusError < 0):\r\n            radiusError += 2 * y + 1\r\n        else:\r\n            x -= 1\r\n            radiusError += 2 * (y - x + 1)\r\n\r\ndef fill_circle(x0, y0, r):  # rpn: int\r\n    x = r\r\n    y = 0\r\n    radiusError = 1 - x\r\n\r\n    while (x >= y):\r\n        fromx = -y + x0\r\n        fromy = -x + y0\r\n        tox = y + x0\r\n        toy = -x + y0\r\n        draw_line(fromx, fromy, tox, toy)  # top\r\n\r\n        fromx = -x + x0\r\n        fromy = -y + y0\r\n        tox = x + x0\r\n        toy = -y + y0\r\n        draw_line(fromx, fromy, tox, toy)  # upper middle\r\n\r\n        fromx = -x + x0\r\n        fromy = y + y0\r\n        tox = x + x0\r\n        toy = y + y0\r\n        draw_line(fromx, fromy, tox, toy)  # lower middle\r\n\r\n        fromx = -y + x0\r\n        fromy = x + y0\r\n        tox = y + x0\r\n        toy = x + y0\r\n        draw_line(fromx, fromy, tox, toy)  # bottom\r\n\r\n        y += 1\r\n        if radiusError < 0:\r\n            radiusError += 2 * y + 1\r\n        else:\r\n            x -= 1\r\n            radiusError += 2 * (y - x + 1)\r\n",
    "tags": "Drawing",
    "title": "Draw Demo 1"
}