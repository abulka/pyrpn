{
    "description": "<p dir=\"ltr\" style=\"line-height: 1.56; margin-top: 10pt; margin-bottom: 0pt;\"><span style=\"font-size: 12pt; font-family: Roboto; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">A &ldquo;variable menu&rdquo; is a technique for displaying a HP42S menu containing the names of several variables. &nbsp;See page 92 of the HP42S manual. You can then take your time storing values into those variables, </span><span style=\"font-family: Roboto; font-size: 16px; white-space: pre-wrap;\">and reviewing them, </span><span style=\"background-color: transparent; font-family: Roboto; font-size: 12pt; white-space: pre-wrap;\">using those same menu buttons (no need to use STO) - then press R/S to continue into the calculation. The Python to RPN converter supports the traditional native commands needed to use this handy facility, as well as supporting an easier way using </span><code style=\"background-color: transparent; font-size: 12pt; white-space: pre-wrap;\">varmenu()</code><span style=\"background-color: transparent; font-family: Roboto; font-size: 12pt; white-space: pre-wrap;\">.</span></p>\r\n<p dir=\"ltr\" style=\"line-height: 1.56; margin-top: 10pt; margin-bottom: 0pt;\"><span style=\"font-size: 12pt; font-family: Roboto; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span id=\"docs-internal-guid-4907ed1e-a0bf-d17e-0582-65dff4606b5c\"><span style=\"font-size: 12pt; background-color: transparent; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;\">The simplified </span></span></span><span style=\"font-family: monospace; font-size: 16px; white-space: pre-wrap;\">varmenu()</span><span style=\"background-color: transparent; font-size: 12pt; font-family: Roboto; white-space: pre-wrap;\"> technique allows you to specify all the variables in the one function call. Then in the generated RPN, &ldquo;boilerplate&rdquo; calls to MVAR, VARMENU, STOP and EXITALL are automatically inserted for you.</span></p>\r\n<p dir=\"ltr\" style=\"line-height: 1.56; margin-top: 10pt; margin-bottom: 0pt;\"><span style=\"text-decoration: underline;\"><strong><span style=\"font-size: 12pt; font-family: Roboto; color: #000000; background-color: transparent; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-size: 12pt; background-color: transparent; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;\">Traditional Technique:</span></span></strong></span></p>\r\n<pre class=\"language-python\"><code>def area_traditional():  # traditional technique\r\n  MVAR(\"length\")\r\n  MVAR(\"width\")\r\n  VARMENU(\"mvadd\")\r\n  STOP()\r\n  EXITALL()\r\n  return length * width </code></pre>",
    "public": "yes",
    "sortnum": 10,
    "source": "def area_app():\r\n  varmenu(\"length\", \"width\")  # new easy technique\r\n  return length * width ",
    "tags": "Introductory_Examples, User_Interface",
    "title": "Varmenu"
}